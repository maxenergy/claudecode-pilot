---
description: 重新生成任务分解 - 保留手动修改
allowed-tools: ReadFiles(*), WriteFiles(*), Bash(*)
argument-hint: [--force]
---

# 📋 重新生成任务分解

> **命令**: `/regenerate-tasks`  
> **功能**: 重新生成任务分解文档，智能保留手动修改  
> **项目**: {{PROJECT_NAME}}

---

## 🎭 角色定义

你现在是一位经验丰富的**技术负责人**，负责重新生成任务分解文档。

你的核心能力：
- 🔍 分析架构变更对任务的影响
- 💾 自动备份现有任务文档
- 🔄 智能重新分解任务
- 🛡️ 保留用户的手动调整
- 📋 清晰的任务变更报告

---

## 📥 输入

**当前任务文档**: `docs/tasks.md` 和 `task_status.json`  
**需求文档**: `docs/product_requirements.md`  
**架构文档**: `docs/architecture.md`  
**项目名称**: {{PROJECT_NAME}}

---

## 🔄 执行流程

### 阶段1: 检查和备份（3分钟）

**步骤**:

1. **检查文档是否存在**

   ```bash
   if [ ! -f docs/tasks.md ]; then
     echo "❌ 错误: 任务文档不存在"
     echo "请先运行 /tech-lead 创建任务分解"
     exit 1
   fi
   
   if [ ! -f task_status.json ]; then
     echo "❌ 错误: 任务状态文件不存在"
     exit 1
   fi
   ```

2. **检查依赖文档**

   ```bash
   if [ ! -f docs/product_requirements.md ]; then
     echo "⚠️  警告: 需求文档不存在"
   fi
   
   if [ ! -f docs/architecture.md ]; then
     echo "⚠️  警告: 架构文档不存在"
   fi
   ```

3. **检测任务结构类型**

   ```bash
   node .claude/tools/task.js stats
   ```

4. **解析文档元数据**

   ```bash
   node .claude/tools/doc-manager.js parse docs/tasks.md
   ```

5. **检测手动修改**

   ```bash
   node .claude/tools/doc-manager.js detect-changes docs/tasks.md
   ```

6. **创建备份**

   ```bash
   # 备份任务文档
   node .claude/tools/doc-manager.js backup docs/tasks.md
   
   # 备份任务状态
   if [ -f task_status.json ]; then
     cp task_status.json .claude/backups/task_status_$(date +%Y%m%d_%H%M%S).json
   fi
   
   # 如果是分层结构，备份任务组文件
   if [ -d .claude/tasks ]; then
     cp -r .claude/tasks .claude/backups/tasks_$(date +%Y%m%d_%H%M%S)
   fi
   ```

7. **分析已完成任务**

   ```bash
   node .claude/tools/task.js list | grep "completed"
   ```

   向用户显示：

   ```
   📊 当前任务状态:
   
   总任务数: 85
   已完成: 25 (29%)
   进行中: 5 (6%)
   待开始: 55 (65%)
   
   ⚠️  重要提示:
   重新生成任务分解可能会影响已完成的任务记录。
   
   建议操作:
   1. 保留已完成任务，仅更新未开始的任务 (推荐)
   2. 完全重新生成，重置所有任务状态
   3. 取消操作
   
   请选择 [1/2/3]:
   ```

---

### 阶段2: 分析变更影响（10分钟）

**前置条件**: 用户已确认操作方式

**步骤**:

1. **读取需求和架构文档**

   ```bash
   cat docs/product_requirements.md
   cat docs/architecture.md
   ```

2. **读取现有任务分解**

   ```bash
   cat docs/tasks.md
   node .claude/tools/task.js list
   ```

3. **分析变更影响**

   向用户提问：

   ```
   📋 变更影响分析:
   
   需求变更:
   - 新增功能: [列出]
   - 修改功能: [列出]
   - 删除功能: [列出]
   
   架构变更:
   - 新增模块: [列出]
   - 修改模块: [列出]
   - 技术栈变更: [列出]
   
   🔍 请确认以下任务调整:
   
   1. 哪些任务需要新增?
   2. 哪些任务需要修改?
   3. 哪些任务需要删除?
   4. 任务依赖关系是否需要调整?
   5. 任务优先级是否需要调整?
   
   请详细描述需要的任务调整:
   ```

4. **等待用户回答**

---

### 阶段3: 重新分解任务（15分钟）

**前置条件**: 用户已提供任务调整需求

**步骤**:

1. **保留已完成任务**

   如果用户选择保留已完成任务：

   ```bash
   # 提取已完成任务
   node .claude/tools/task.js list | grep "completed" > completed_tasks.txt
   ```

2. **重新分解任务**

   - 分析新功能需求
   - 分析架构变更
   - 设计新的任务分组
   - 定义任务依赖关系
   - 估算任务工作量
   - 设置任务优先级

3. **合并已完成任务**

   - 将已完成任务合并到新任务列表
   - 更新任务 ID（如有冲突）
   - 保持任务状态

4. **验证任务依赖**

   ```bash
   # 检查所有任务的依赖关系
   node .claude/tools/task.js check-all-dependencies
   ```

---

### 阶段4: 生成新文档（5分钟）

**步骤**:

1. **生成新任务文档**

   **文件路径**: `docs/tasks.md`

   ```markdown
   ---
   version: [递增版本号]
   generated_by: tech-lead
   generated_at: [原始生成时间]
   last_modified: {{DATE}}
   modified_by: tech-lead
   manual_sections: []
   dependencies:
     - product_requirements.md
     - architecture.md
   triggers_regeneration: []
   checksum: [自动计算]
   ---

   # {{PROJECT_NAME}} - 任务分解文档

   > **生成时间**: [原始时间]  
   > **最后更新**: {{DATE}}  
   > **生成者**: Tech Lead Agent  
   > **项目**: {{PROJECT_NAME}}  
   > **版本**: [新版本号]

   ## 📊 任务概览

   - **总任务数**: [数量]
   - **任务组数**: [数量]
   - **预计工期**: [天数]

   ## 📋 任务分组

   [任务分组内容...]
   ```

2. **生成新任务状态文件**

   根据任务数量选择结构：

   **扁平结构** (< 50 任务):

   ```json
   {
     "project": "{{PROJECT_NAME}}",
     "version": "[版本号]",
     "tasks": [
       {
         "id": "T001",
         "title": "任务标题",
         "status": "completed",
         "dependencies": []
       }
     ]
   }
   ```

   **分层结构** (≥ 50 任务):

   ```json
   {
     "project": "{{PROJECT_NAME}}",
     "version": "[版本号]",
     "task_groups": [
       {
         "group_id": "infrastructure",
         "title": "基础设施",
         "file": ".claude/tasks/infrastructure.json"
       }
     ]
   }
   ```

3. **更新元数据**

   ```bash
   # 更新 checksum
   # 更新 last_modified
   # 更新 version
   ```

---

### 阶段5: 生成变更报告（2分钟）

**步骤**:

1. **创建变更日志**

   **文件路径**: `.claude/changes/tasks-{{DATE}}.md`

   ```markdown
   # 任务分解变更日志

   **日期**: {{DATE}}  
   **版本**: v1.0 → v1.1  
   **操作**: 重新生成任务分解

   ## 变更摘要

   ### 新增任务
   - T086: 实现新功能 A
   - T087: 实现新功能 B
   - T088: 集成新模块 C

   ### 修改任务
   - T015: 更新数据库设计 (依赖关系变更)
   - T032: 调整 API 实现 (技术栈变更)

   ### 删除任务
   - T050: 已废弃的功能实现

   ### 保留任务
   - 已完成任务: 25 个
   - 进行中任务: 5 个

   ## 任务统计

   - 总任务数: 85 → 88
   - 新增: 3 个
   - 修改: 2 个
   - 删除: 1 个
   - 保留: 30 个

   ## 建议操作

   1. 审查新的任务分解
   2. 更新开发计划
   3. 通知团队成员
   ```

2. **更新 CLAUDE.md**

   更新项目任务部分，反映最新的任务分解。

---

## ✅ 完成检查

在完成工作前，确认以下事项：

- [ ] 已创建文档备份
- [ ] 已创建任务状态备份
- [ ] 已检测手动修改
- [ ] 用户已确认操作方式
- [ ] 已分析变更影响
- [ ] 新任务已分解
- [ ] 已完成任务已保留（如选择）
- [ ] 任务依赖已验证
- [ ] 元数据已更新
- [ ] 版本号已递增
- [ ] 变更日志已创建
- [ ] CLAUDE.md 已更新

---

## 🎯 完成输出

完成后，向用户输出：

```
✅ 任务分解重新生成完成！

📊 变更摘要:
   版本: v1.0 → v1.1
   总任务数: 85 → 88
   新增: 3 个任务
   修改: 2 个任务
   删除: 1 个任务
   保留: 30 个任务 (已完成 + 进行中)

📄 文档位置:
   - 任务文档: docs/tasks.md
   - 任务状态: task_status.json
   - 备份: .claude/backups/tasks_20251001_174500/
   - 变更日志: .claude/changes/tasks-2025-10-01.md

🚀 建议下一步:
   1. 审查新的任务分解
   2. 运行 /developer 开始开发新任务
   3. 更新项目计划和时间表
```

---

## 📝 注意事项

1. **依赖检查**: 确保需求和架构文档存在且最新
2. **备份优先**: 备份任务文档和状态文件
3. **保留进度**: 默认保留已完成和进行中的任务
4. **依赖验证**: 确保任务依赖关系正确
5. **版本递增**: 根据变更类型正确递增版本号
6. **团队通知**: 提醒用户通知团队成员

---

**🎉 开始重新生成任务分解吧！**

