/**
 * Init Command
 *
 * Initializes a new Claude Code GPT-Pilot project
 */

const path = require('path');
const fs = require('fs');
const { ensureDirectory } = require('../utils');
const { copyAllTemplates, getDefaultVariables } = require('../templates');

/**
 * Initialize a new project
 * @param {Object} options - Command options
 */
async function init(options) {
  const projectName = options.name || path.basename(process.cwd());
  const targetDir = options.dir ? path.resolve(options.dir) : process.cwd();

  console.log('🚀 Initializing Claude Code GPT-Pilot project...');
  console.log(`📁 Project: ${projectName}`);
  console.log(`📂 Directory: ${targetDir}\n`);

  try {
    // Prepare variables for templates
    const variables = getDefaultVariables(projectName);

    // Step 1: Create .claude directory structure (Claude Code official)
    console.log('📦 Creating .claude directory structure...');
    createClaudeStructure(targetDir);
    console.log('✅ .claude structure created\n');

    // Step 2: Create project directories
    console.log('📁 Creating project directories...');
    createProjectDirectories(targetDir);
    console.log('✅ Project directories created\n');

    // Step 3: Generate basic files
    console.log('📝 Generating basic files...');
    generateBasicFiles(targetDir, projectName);
    console.log('✅ Basic files generated\n');

    // Step 4: Copy template files
    console.log('📋 Copying Agent templates...');
    copyAllTemplates(targetDir, variables);
    console.log('✅ Agent templates copied\n');

    // Success message
    console.log('🎉 Project initialized successfully!');
    console.log('\n📚 Next steps:');
    console.log('  1. Open this project in Claude Code');
    console.log('  2. Type / to see available slash commands');
    console.log('  3. Start with /product-owner to define requirements');
    console.log('  4. Follow the Agent workflow to build your project\n');

  } catch (error) {
    console.error('❌ Error initializing project:', error.message);
    process.exit(1);
  }
}

/**
 * Create .claude directory structure (Claude Code official structure)
 * @param {string} targetDir - Target directory
 */
function createClaudeStructure(targetDir) {
  const claudeDir = path.join(targetDir, '.claude');

  // Create main directories following Claude Code official structure
  ensureDirectory(claudeDir);
  ensureDirectory(path.join(claudeDir, 'commands'));  // Slash commands directory
  ensureDirectory(path.join(claudeDir, 'tools'));     // Task management tools

  // Create agents.json for internal tracking
  const agentsConfig = {
    agents: [
      { id: 'product-owner', name: 'Product Owner', command: 'product-owner.md' },
      { id: 'architect', name: 'Architect', command: 'architect.md' },
      { id: 'tech-lead', name: 'Tech Lead', command: 'tech-lead.md' },
      { id: 'developer', name: 'Developer', command: 'developer.md' },
      { id: 'tester', name: 'Tester', command: 'tester.md' },
      { id: 'reviewer', name: 'Reviewer', command: 'reviewer.md' },
      { id: 'debugger', name: 'Debugger', command: 'debugger.md' }
    ]
  };

  fs.writeFileSync(
    path.join(claudeDir, 'agents.json'),
    JSON.stringify(agentsConfig, null, 2)
  );

  // Create context_memory.json
  const contextMemory = {
    project_context: {},
    agent_history: [],
    last_updated: new Date().toISOString()
  };

  fs.writeFileSync(
    path.join(claudeDir, 'context_memory.json'),
    JSON.stringify(contextMemory, null, 2)
  );

  // Create README.md in .claude
  const claudeReadme = `# .claude Directory

This directory follows Claude Code's official structure for custom slash commands and tools.

## Structure

- \`commands/\` - Custom slash command definitions (Markdown files)
- \`tools/\` - Task management and utility scripts
- \`agents.json\` - Agent configuration metadata
- \`context_memory.json\` - Shared context between agents

## Claude Code Integration

Each file in \`commands/\` directory becomes a slash command:
- \`commands/product-owner.md\` → \`/product-owner\` command
- \`commands/architect.md\` → \`/architect\` command
- etc.

## Documentation

See https://docs.claude.com/en/docs/claude-code/slash-commands for more information.
`;

  fs.writeFileSync(
    path.join(claudeDir, 'README.md'),
    claudeReadme
  );
}

/**
 * Create project directories
 * @param {string} targetDir - Target directory
 */
function createProjectDirectories(targetDir) {
  ensureDirectory(path.join(targetDir, 'docs'));
  ensureDirectory(path.join(targetDir, 'src'));
  ensureDirectory(path.join(targetDir, 'tests'));
}

/**
 * Generate basic files
 * @param {string} targetDir - Target directory
 * @param {string} projectName - Project name
 */
function generateBasicFiles(targetDir, projectName) {
  // Generate README.md
  const readme = `# ${projectName}

> Generated by Claude Code GPT-Pilot

## About

This project was initialized with Claude Code GPT-Pilot, an AI-powered software development lifecycle management system.

## Getting Started

1. Open this project in Claude Code
2. Review the \`CLAUDE.md\` file for available commands
3. Start with \`/product-owner\` to define your requirements

## Project Structure

- \`docs/\` - Project documentation
- \`src/\` - Source code
- \`tests/\` - Test files
- \`.claude/\` - Claude Code custom commands and tools

## Workflow

1. **Product Owner** - Define requirements
2. **Architect** - Design architecture
3. **Tech Lead** - Break down tasks
4. **Developer** - Implement features
5. **Tester** - Write and run tests
6. **Reviewer** - Review code
7. **Debugger** - Fix issues

## Documentation

- [Product Requirements](docs/product_requirements.md) - Generated by Product Owner
- [Architecture](docs/architecture.md) - Generated by Architect
- [Tasks](tasks.md) - Generated by Tech Lead

## License

MIT
`;

  fs.writeFileSync(path.join(targetDir, 'README.md'), readme);

  // Generate CLAUDE.md as project memory file (Claude Code official usage)
  const claudeMd = `# ${projectName} - Project Memory

> This file serves as the project memory for Claude Code.
> Custom slash commands are defined in \`.claude/commands/\` directory.

## Project Overview

**Project Name**: ${projectName}
**Initialized**: ${new Date().toISOString().split('T')[0]}
**Framework**: Claude Code GPT-Pilot

## Available Slash Commands

The following custom slash commands are available in this project:

- \`/product-owner\` - Define product requirements and user stories
- \`/architect\` - Design system architecture and technical decisions
- \`/tech-lead\` - Break down features into development tasks
- \`/developer [task-id]\` - Implement a specific task (manual mode)
- \`/developer-auto [start-task-id]\` - Auto-execute tasks sequentially
- \`/tester [task-id]\` - Write and run tests for a task
- \`/reviewer [task-id]\` - Review code changes for a task
- \`/debugger\` - Debug and fix issues

## Workflow

1. **Requirements** → Use \`/product-owner\` to define what to build
2. **Architecture** → Use \`/architect\` to design the system
3. **Planning** → Use \`/tech-lead\` to create task breakdown
4. **Development** → Use \`/developer\` or \`/developer-auto\` to implement
5. **Testing** → Use \`/tester\` to ensure quality
6. **Review** → Use \`/reviewer\` for code review
7. **Debug** → Use \`/debugger\` when issues arise

## Project Context

<!-- Claude Code will use this section to remember project-specific information -->

### Technology Stack

(To be defined by Architect)

### Key Decisions

(To be documented as the project progresses)

### Current Status

- Phase: Initialization
- Last Updated: ${new Date().toISOString().split('T')[0]}

---

*This file is managed by Claude Code GPT-Pilot. You can edit it to add project-specific context.*
`;

  fs.writeFileSync(path.join(targetDir, 'CLAUDE.md'), claudeMd);
}

module.exports = init;

